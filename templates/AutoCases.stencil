{% for enum in types.based.AutoCases|enum %}
extension {{ enum.name }} {
    static var count: Int {
        return {{ enum.cases.count }}
    }
    {% if not enum.hasAssociatedValues %}
    static var allCases: [{{ enum.name }}] {
        return [
        {% for case in enum.cases %}
            .{{ case.name }}{% if not forloop.last %},{% endif %}
        {% endfor %}
        ]
    }
    {% endif %}

    {% for case in enum.cases %}
    func is{{ case.name|upperFirstLetter }}() -> Bool {
        {% ifnot case.hasAssociatedValue %}
        if case .{{ case.name }} = self {
            return true
        }
        else {
            return false
        }
        {% else %}
        if case .{{ case.name }}({% for associatedValue in case.associatedValues %}_{% if not forloop.last %},{% endif %}{% endfor %}) = self {
            return true
        }
        else {
            return false
        }
        {% endif %}
    }
    func isNot{{ case.name|upperFirstLetter }}() -> Bool {
        return !self.is{{ case.name|upperFirstLetter }}()
    }
    static func is{{ case.name|upperFirstLetter }}(_ `case`: {{ enum.name }}) -> Bool {
        return `case`.is{{ case.name|upperFirstLetter }}()
    }
    static func isNot{{ case.name|upperFirstLetter }}(_ `case`: {{ enum.name }}) -> Bool {
        return !`case`.is{{ case.name|upperFirstLetter }}()
    }
    {% endfor %}
}
{% endfor %}
