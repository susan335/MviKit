import RxSwift

{% for type in types.based.MviViewModelProtocol|class %}
// MARK: - {{ type.name }} MviViewModel üêü
extension {{ type.name }} {

    func resultObservable(intentsSubject: PublishSubject<Intent>) -> Observable<Result> {
        let connectable = intentsSubject
            .compose(self.intentFilter())
            .map(self.actionFrom)
            .flatMap(self.processor.process)
            .publish()
        connectable.connect().disposed(by: self.disposeBag)
        return connectable
    }
    func stateObservable(resultObservable: Observable<Result>) -> Observable<State> {
        let connectable = resultObservable.filter { $0 is RetentionResult }
            .map { $0 as! RetentionResult }
            .scan(State.default(), accumulator: self.reducer)
            .distinctUntilChanged()
            .replay(1)
        connectable.connect().disposed(by: self.disposeBag)
        return connectable
    }
    func taskObservable(resultObservable: Observable<Result>) -> Observable<Task> {
        let connectable = resultObservable.filter { $0 is DisposableResult }
            .map { $0 as! DisposableResult }
            .map(self.taskFrom)
            .publish()

        connectable.connect().disposed(by: self.disposeBag)
        return connectable
    }
}
{% endfor %}
